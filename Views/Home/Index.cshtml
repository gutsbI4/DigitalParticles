<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Цифровые частицы</title>
    <link rel="stylesheet" href="~/css/particles.css" />
</head>
<body>
    <div class="particle-container" id="particleContainer">
        <div class="title">ЦИФРОВЫЕ ЧАСТИЦЫ</div>
        <div class="subtitle">Интерактивная визуализация</div>
        <div class="mouse-cursor" id="cursor"></div>
    </div>

    <script>
        class ParticleSystem {
            constructor() {
                this.container = document.getElementById('particleContainer');
                this.cursor = document.getElementById('cursor');
                this.particles = [];
                this.mouse = { x: window.innerWidth / 2, y: window.innerHeight / 2 };
                this.connectionLines = [];
                this.init();
            }

            init() {
                this.createParticles();
                this.createWaveLines();
                this.bindEvents();
                this.animate();
            }

            createParticles() {
                const particleCount = 80;
                const sizes = ['small', 'medium', 'large', 'xlarge'];

                for (let i = 0; i < particleCount; i++) {
                    const particle = document.createElement('div');
                    const sizeClass = sizes[Math.floor(Math.random() * sizes.length)];
                    particle.className = `particle ${sizeClass}`;

                    const x = Math.random() * (window.innerWidth - 50) + 25;
                    const y = Math.random() * (window.innerHeight - 50) + 25;

                    particle.style.left = x + 'px';
                    particle.style.top = y + 'px';
                    particle.style.animationDelay = Math.random() * 6 + 's';

                    // Отключаем CSS анимацию для ручного контроля
                    particle.style.animation = 'none';

                    this.container.appendChild(particle);

                    this.particles.push({
                        element: particle,
                        x: x,
                        y: y,
                        baseX: x,
                        baseY: y,
                        vx: (Math.random() - 0.5) * 0.3,
                        vy: (Math.random() - 0.5) * 0.3,
                        size: sizeClass === 'small' ? 4 : sizeClass === 'medium' ? 8 : sizeClass === 'large' ? 12 : 16,
                        originalSize: sizeClass === 'small' ? 4 : sizeClass === 'medium' ? 8 : sizeClass === 'large' ? 12 : 16,
                        floatOffset: Math.random() * Math.PI * 2
                    });
                }
            }

            createWaveLines() {
                for (let i = 0; i < 10; i++) {
                    const line = document.createElement('div');
                    line.className = 'wave-line';
                    line.style.top = Math.random() * window.innerHeight + 'px';
                    line.style.width = Math.random() * 1200 + 100 + 'px';
                    line.style.animationDelay = Math.random() * 4 + 's';
                    this.container.appendChild(line);
                }
            }

            bindEvents() {
                document.addEventListener('mousemove', (e) => {
                    this.mouse.x = e.clientX;
                    this.mouse.y = e.clientY;

                    this.cursor.style.left = e.clientX - 10 + 'px';
                    this.cursor.style.top = e.clientY - 10 + 'px';
                });

                document.addEventListener('click', (e) => {
                    this.createRipple(e.clientX, e.clientY);
                    this.attractParticles(e.clientX, e.clientY);
                });
            }

            createRipple(x, y) {
                const ripple = document.createElement('div');
                ripple.className = 'ripple';
                ripple.style.left = x - 25 + 'px';
                ripple.style.top = y - 25 + 'px';
                ripple.style.width = '50px';
                ripple.style.height = '50px';

                this.container.appendChild(ripple);

                setTimeout(() => {
                    ripple.remove();
                }, 2000);
            }

            attractParticles(x, y) {
                this.particles.forEach(particle => {
                    const dx = x - particle.x;
                    const dy = y - particle.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);

                    if (distance < 400) { // Увеличил радиус с 300 до 400
                        const force = (400 - distance) / 400;
                        particle.vx += (dx / distance) * force * 1.2; // Увеличил силу с 0.5 до 1.2
                        particle.vy += (dy / distance) * force * 1.2;
                    }
                });
            }

            animate() {
                const time = Date.now() * 0.001;

                this.particles.forEach((particle, index) => {
                    // Базовое плавающее движение
                    const floatX = Math.sin(time + particle.floatOffset) * 15;
                    const floatY = Math.cos(time + particle.floatOffset * 0.7) * 10;

                    // Влияние мыши - УВЕЛИЧЕННАЯ СИЛА И РАДИУС
                    const dx = this.mouse.x - particle.x;
                    const dy = this.mouse.y - particle.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);

                    let mouseInfluence = 0;
                    if (distance < 300) { // Увеличил радиус с 200 до 300
                        mouseInfluence = (300 - distance) / 300;
                        const force = mouseInfluence * 0.08; // Увеличил силу с 0.02 до 0.08
                        particle.vx += (dx / distance) * force;
                        particle.vy += (dy / distance) * force;
                    }

                    // Обновление позиции с увеличенной скоростью
                    particle.x += particle.vx + floatX * 0.008; // Увеличил с 0.01 до 0.008
                    particle.y += particle.vy + floatY * 0.008;

                    // Уменьшенное затухание = больше скорости
                    particle.vx *= 0.92; // Уменьшил с 0.95 до 0.92
                    particle.vy *= 0.92;

                    // Возврат к базовой позиции (уменьшил для более свободного движения)
                    const returnForce = 0.0005; // Уменьшил с 0.001 до 0.0005
                    particle.vx += (particle.baseX - particle.x) * returnForce;
                    particle.vy += (particle.baseY - particle.y) * returnForce;

                    // Границы экрана
                    if (particle.x < 0) {
                        particle.x = 0;
                        particle.vx *= -0.3; // Уменьшил отскок для более плавного движения
                    }
                    if (particle.x > window.innerWidth) {
                        particle.x = window.innerWidth;
                        particle.vx *= -0.3;
                    }
                    if (particle.y < 0) {
                        particle.y = 0;
                        particle.vy *= -0.3;
                    }
                    if (particle.y > window.innerHeight) {
                        particle.y = window.innerHeight;
                        particle.vy *= -0.3;
                    }

                    // Применение позиции
                    particle.element.style.left = particle.x + 'px';
                    particle.element.style.top = particle.y + 'px';

                    // Увеличенное масштабирование при приближении к мыши
                    if (distance < 150) { // Увеличил радиус с 120 до 150
                        const scale = 1 + mouseInfluence * 2.5; // Увеличил с 1.5 до 2.5
                        const rotation = time * 80 + index * 15; // Увеличил скорость вращения
                        particle.element.style.transform = `scale(${scale}) rotate(${rotation}deg)`;
                        particle.element.style.boxShadow = `0 0 ${25 + mouseInfluence * 50}px currentColor`; // Увеличил свечение
                    } else {
                        particle.element.style.transform = `scale(1) rotate(${time * 15 + index * 8}deg)`;
                        particle.element.style.boxShadow = `0 0 ${particle.originalSize * 2}px currentColor`;
                    }
                });

                this.updateConnectionLines();
                requestAnimationFrame(() => this.animate());
            }

            updateConnectionLines() {
                // Удаляем старые линии
                this.connectionLines.forEach(line => line.remove());
                this.connectionLines = [];

                // Создаем новые линии между близкими частицами
                for (let i = 0; i < this.particles.length; i++) {
                    for (let j = i + 1; j < this.particles.length; j++) {
                        const p1 = this.particles[i];
                        const p2 = this.particles[j];
                        const distance = Math.sqrt(
                            Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)
                        );

                        if (distance < 120) {
                            const line = document.createElement('div');
                            line.style.position = 'absolute';
                            line.style.height = '1px';
                            line.style.pointerEvents = 'none';
                            line.style.zIndex = '1';

                            // Вычисляем центр между двумя точками
                            const centerX = (p1.x + p2.x) / 2;
                            const centerY = (p1.y + p2.y) / 2;

                            // Угол поворота
                            const angle = Math.atan2(p2.y - p1.y, p2.x - p1.x);

                            // Устанавливаем позицию в центре и поворачиваем
                            line.style.left = (centerX - distance / 2) + 'px';
                            line.style.top = centerY + 'px';
                            line.style.width = distance + 'px';
                            line.style.transformOrigin = 'center';
                            line.style.transform = `rotate(${angle}rad)`;

                            // Прозрачность зависит от расстояния
                            const opacity = (120 - distance) / 120 * 0.4;
                            line.style.background = `linear-gradient(90deg,
                                rgba(255, 107, 107, 0),
                                rgba(255, 107, 107, ${opacity}),
                                rgba(255, 107, 107, 0))`;

                            this.container.appendChild(line);
                            this.connectionLines.push(line);
                        }
                    }
                }
            }
        }

        // Запуск системы частиц
        window.addEventListener('load', () => {
            new ParticleSystem();
        });

        // Обновление размеров при изменении окна
        window.addEventListener('resize', () => {
            location.reload();
        });
    </script>
</body>
</html>